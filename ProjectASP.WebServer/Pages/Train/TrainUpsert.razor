@page "/train/create"
@page "/train/edit/{id:int}"
@using ProjectASP.Business.Repositories.IRepositories;
@using ProjectASP.Models;
@inject NavigationManager navigationManager
@inject ITrainRepository trainRepository


<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Train</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="@Train" OnValidSubmit="@UpsertObj">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="form-group col-4 border p-3 mt-4">
                        <label>Name</label>
                        <InputText @bind-Value="@Train.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>Train.Name"></ValidationMessage>
                        <label>Length</label>
                        <InputNumber @bind-Value="@Train.Length" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>Train.Length"></ValidationMessage>
                        <label>IsActive</label>
                        <InputCheckbox @bind-Value="@Train.IsActive" class="form-check"></InputCheckbox>
                        <ValidationMessage For="()=>Train.IsActive"></ValidationMessage>
                    </div>

                    <div class="form-group py-2">
                        <button class="btn btn-primary">@Title</button>
                        <NavLink href="train" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private TrainDTO Train { get; set; } = new TrainDTO();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                //create
                IsLoading = false;
            }
            else
            {
                //update
                Title = "Update";
                await Load();
            }
        }

    }

    private async Task Load()
    {
        IsLoading = true;
        StateHasChanged();
        Train = await trainRepository.GetAsync(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertObj()
    {

        if (Train.Id == 0)
        {
            //create
            await trainRepository.CreateAsync(Train);
        }
        else
        {
            //update
            await trainRepository.UpdateAsync(Train);
        }
        navigationManager.NavigateTo("train");
    }



}